var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// nodePolyfill.ts
var nodePolyfill_exports = {};
__export(nodePolyfill_exports, {
  addNodePolyfill: () => addNodePolyfill
});
module.exports = __toCommonJS(nodePolyfill_exports);
var import_webpack = require("@umijs/bundler-webpack/compiled/webpack");
async function addNodePolyfill(opts) {
  const { config } = opts;
  const nodeLibs = require("node-libs-browser");
  config.plugin("node-polyfill-provider").use(import_webpack.ProvidePlugin, [
    {
      Buffer: ["buffer", "Buffer"],
      process: nodeLibs["process"]
    }
  ]);
  config.resolve.fallback.merge(__spreadProps(__spreadValues({}, Object.keys(nodeLibs).reduce((memo, key) => {
    if (nodeLibs[key]) {
      memo[key] = nodeLibs[key];
    } else {
      memo[key] = false;
    }
    return memo;
  }, {})), {
    http: false,
    https: false
  }));
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  addNodePolyfill
});
