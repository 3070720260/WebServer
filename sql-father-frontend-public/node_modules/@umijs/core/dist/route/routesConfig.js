var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// routesConfig.ts
var routesConfig_exports = {};
__export(routesConfig_exports, {
  getConfigRoutes: () => getConfigRoutes
});
module.exports = __toCommonJS(routesConfig_exports);
var import_assert = __toESM(require("assert"));
function getConfigRoutes(opts) {
  const memo = { ret: {}, id: 1 };
  transformRoutes({
    routes: opts.routes,
    parentId: void 0,
    memo,
    onResolveComponent: opts.onResolveComponent
  });
  return memo.ret;
}
function transformRoutes(opts) {
  opts.routes.forEach((route) => {
    transformRoute({
      route,
      parentId: opts.parentId,
      memo: opts.memo,
      onResolveComponent: opts.onResolveComponent
    });
  });
}
function transformRoute(opts) {
  (0, import_assert.default)(!opts.route.children, "children is not allowed in route props, use routes instead.");
  const id = String(opts.memo.id++);
  const _a = opts.route, { routes, component, wrappers } = _a, routeProps = __objRest(_a, ["routes", "component", "wrappers"]);
  let absPath = opts.route.path;
  if ((absPath == null ? void 0 : absPath.charAt(0)) !== "/") {
    const parentAbsPath = opts.parentId ? opts.memo.ret[opts.parentId].absPath.replace(/\/+$/, "/") : "/";
    absPath = parentAbsPath + absPath;
  }
  opts.memo.ret[id] = __spreadProps(__spreadValues(__spreadProps(__spreadValues({}, routeProps), {
    path: opts.route.path
  }), component ? {
    file: opts.onResolveComponent ? opts.onResolveComponent(component) : component
  } : {}), {
    parentId: opts.parentId,
    id
  });
  if (absPath) {
    opts.memo.ret[id].absPath = absPath;
  }
  if (wrappers == null ? void 0 : wrappers.length) {
    let parentId = opts.parentId;
    let path = opts.route.path;
    wrappers.forEach((wrapper) => {
      const { id: id2 } = transformRoute({
        route: { path, component: wrapper, isWrapper: true },
        parentId,
        memo: opts.memo,
        onResolveComponent: opts.onResolveComponent
      });
      parentId = id2;
      path = "";
    });
    opts.memo.ret[id].parentId = parentId;
    opts.memo.ret[id].path = path;
    opts.memo.ret[id].originPath = opts.route.path;
  }
  if (opts.route.routes) {
    transformRoutes({
      routes: opts.route.routes,
      parentId: id,
      memo: opts.memo,
      onResolveComponent: opts.onResolveComponent
    });
  }
  return { id };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getConfigRoutes
});
