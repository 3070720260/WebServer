var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// tmpFiles.ts
var tmpFiles_exports = {};
__export(tmpFiles_exports, {
  default: () => tmpFiles_default
});
module.exports = __toCommonJS(tmpFiles_exports);
var import_utils = require("@umijs/utils");
var import_fs = require("fs");
var import_path = require("path");
var import_constants = require("../../constants");
var import_getModuleExports = require("./getModuleExports");
var import_importsToStr = require("./importsToStr");
var import_routes = require("./routes");
var tmpFiles_default = (api) => {
  const umiDir = process.env.UMI_DIR;
  api.describe({
    key: "tmpFiles",
    config: {
      schema(Joi) {
        return Joi.boolean();
      }
    }
  });
  api.onGenerateFiles(async (opts) => {
    var _a;
    const rendererPath = (0, import_utils.winPath)(await api.applyPlugins({
      key: "modifyRendererPath",
      initialValue: (0, import_path.dirname)(require.resolve("@umijs/renderer-react/package.json"))
    }));
    const serverRendererPath = (0, import_utils.winPath)(await api.applyPlugins({
      key: "modifyServerRendererPath",
      initialValue: (0, import_path.join)(rendererPath, "dist/server.js")
    }));
    const srcPrefix = api.appData.hasSrcDir ? "src/" : "";
    const umiTempDir = `${srcPrefix}.umi`;
    const baseUrl = api.appData.hasSrcDir ? "../../" : "../";
    api.writeTmpFile({
      noPluginDir: true,
      path: "tsconfig.json",
      content: JSON.stringify({
        compilerOptions: __spreadProps(__spreadValues({
          target: "esnext",
          module: "esnext",
          moduleResolution: "node",
          importHelpers: true,
          jsx: api.appData.framework === "vue" ? "preserve" : "react-jsx",
          esModuleInterop: true,
          sourceMap: true,
          baseUrl,
          strict: true,
          resolveJsonModule: true,
          allowSyntheticDefaultImports: true
        }, api.appData.framework === "vue" ? {
          isolatedModules: true,
          preserveValueImports: true
        } : {}), {
          paths: __spreadValues({
            "@/*": [`${srcPrefix}*`],
            "@@/*": [`${umiTempDir}/*`],
            [`${api.appData.umi.importSource}`]: [umiDir],
            [`${api.appData.umi.importSource}/typings`]: [
              `${umiTempDir}/typings`
            ]
          }, api.config.vite ? {
            "@fs/*": ["*"]
          } : {})
        })
      }, null, 2)
    });
    api.writeTmpFile({
      noPluginDir: true,
      path: "typings.d.ts",
      content: `
type CSSModuleClasses = { readonly [key: string]: string }
declare module '*.css' {
  const classes: CSSModuleClasses
  export default classes
}
declare module '*.scss' {
  const classes: CSSModuleClasses
  export default classes
}
declare module '*.sass' {
  const classes: CSSModuleClasses
  export default classes
}
declare module '*.less' {
  const classes: CSSModuleClasses
  export default classes
}
declare module '*.styl' {
  const classes: CSSModuleClasses
  export default classes
}
declare module '*.stylus' {
  const classes: CSSModuleClasses
  export default classes
}

// images
declare module '*.jpg' {
  const src: string
  export default src
}
declare module '*.jpeg' {
  const src: string
  export default src
}
declare module '*.png' {
  const src: string
  export default src
}
declare module '*.gif' {
  const src: string
  export default src
}
declare module '*.svg' {
  ${api.config.svgr ? `
  import * as React from 'react';
  export const ReactComponent: React.FunctionComponent<React.SVGProps<
  SVGSVGElement
  > & { title?: string }>;
`.trimStart() : ""}
  const src: string
  export default src
}
declare module '*.ico' {
  const src: string
  export default src
}
declare module '*.webp' {
  const src: string
  export default src
}
declare module '*.avif' {
  const src: string
  export default src
}

// media
declare module '*.mp4' {
  const src: string
  export default src
}
declare module '*.webm' {
  const src: string
  export default src
}
declare module '*.ogg' {
  const src: string
  export default src
}
declare module '*.mp3' {
  const src: string
  export default src
}
declare module '*.wav' {
  const src: string
  export default src
}
declare module '*.flac' {
  const src: string
  export default src
}
declare module '*.aac' {
  const src: string
  export default src
}

// fonts
declare module '*.woff' {
  const src: string
  export default src
}
declare module '*.woff2' {
  const src: string
  export default src
}
declare module '*.eot' {
  const src: string
  export default src
}
declare module '*.ttf' {
  const src: string
  export default src
}
declare module '*.otf' {
  const src: string
  export default src
}

// other
declare module '*.wasm' {
  const initWasm: (options: WebAssembly.Imports) => Promise<WebAssembly.Exports>
  export default initWasm
}
declare module '*.webmanifest' {
  const src: string
  export default src
}
declare module '*.pdf' {
  const src: string
  export default src
}
declare module '*.txt' {
  const src: string
  export default src
}
`.trimEnd()
    });
    api.writeTmpFile({
      noPluginDir: true,
      path: "umi.ts",
      tplPath: (0, import_path.join)(import_constants.TEMPLATES_DIR, "umi.tpl"),
      context: {
        mountElementId: api.config.mountElementId,
        rendererPath,
        publicPath: api.config.publicPath,
        runtimePublicPath: api.config.runtimePublicPath ? "true" : "false",
        entryCode: (await api.applyPlugins({
          key: "addEntryCode",
          initialValue: []
        })).join("\n"),
        entryCodeAhead: (await api.applyPlugins({
          key: "addEntryCodeAhead",
          initialValue: []
        })).join("\n"),
        polyfillImports: (0, import_importsToStr.importsToStr)(await api.applyPlugins({
          key: "addPolyfillImports",
          initialValue: []
        })).join("\n"),
        importsAhead: (0, import_importsToStr.importsToStr)(await api.applyPlugins({
          key: "addEntryImportsAhead",
          initialValue: [
            api.appData.globalCSS.length && {
              source: api.appData.globalCSS[0]
            },
            api.appData.globalJS.length && {
              source: api.appData.globalJS[0]
            }
          ].filter(Boolean)
        })).join("\n"),
        imports: (0, import_importsToStr.importsToStr)(await api.applyPlugins({
          key: "addEntryImports",
          initialValue: []
        })).join("\n"),
        basename: api.config.base,
        historyType: api.config.history.type,
        hydrate: !!api.config.ssr,
        loadingComponent: (0, import_fs.existsSync)((0, import_path.join)(api.paths.absSrcPath, "loading.tsx")) || (0, import_fs.existsSync)((0, import_path.join)(api.paths.absSrcPath, "loading.jsx")) || (0, import_fs.existsSync)((0, import_path.join)(api.paths.absSrcPath, "loading.js"))
      }
    });
    api.writeTmpFile({
      noPluginDir: true,
      path: "core/EmptyRoute.tsx",
      content: `
import React from 'react';
import { Outlet } from 'umi';
export default function EmptyRoute() {
  return <Outlet />;
}
      `
    });
    let routes;
    if (opts.isFirstTime) {
      routes = api.appData.routes;
    } else {
      routes = await (0, import_routes.getRoutes)({
        api
      });
    }
    const hasSrc = api.appData.hasSrcDir;
    const pages = (0, import_path.basename)(((_a = api.config.conventionRoutes) == null ? void 0 : _a.base) || api.paths.absPagesPath);
    const prefix = hasSrc ? `../../../src/${pages}/` : `../../${pages}/`;
    const clonedRoutes = import_utils.lodash.cloneDeep(routes);
    for (const id of Object.keys(clonedRoutes)) {
      for (const key of Object.keys(clonedRoutes[id])) {
        const route = clonedRoutes[id];
        if (key.startsWith("__") || key.startsWith("absPath")) {
          delete route[key];
        }
      }
    }
    api.writeTmpFile({
      noPluginDir: true,
      path: "core/route.tsx",
      tplPath: (0, import_path.join)(import_constants.TEMPLATES_DIR, "route.tpl"),
      context: {
        isReact: api.appData.framework === "react",
        isClientLoaderEnabled: !!api.config.clientLoader,
        routes: JSON.stringify(clonedRoutes).replace(/"(clientLoaders\[.*?)"/g, "$1"),
        routeComponents: await (0, import_routes.getRouteComponents)({ routes, prefix, api })
      }
    });
    const plugins = await api.applyPlugins({
      key: "addRuntimePlugin",
      initialValue: [
        (0, import_utils.tryPaths)([
          (0, import_path.join)(api.paths.absSrcPath, "app.ts"),
          (0, import_path.join)(api.paths.absSrcPath, "app.tsx"),
          (0, import_path.join)(api.paths.absSrcPath, "app.jsx"),
          (0, import_path.join)(api.paths.absSrcPath, "app.js")
        ])
      ].filter(Boolean)
    });
    const validKeys = await api.applyPlugins({
      key: "addRuntimePluginKey",
      initialValue: [
        "patchRoutes",
        "patchClientRoutes",
        "modifyContextOpts",
        "rootContainer",
        "innerProvider",
        "i18nProvider",
        "accessProvider",
        "dataflowProvider",
        "outerProvider",
        "render",
        "onRouteChange"
      ]
    });
    api.writeTmpFile({
      noPluginDir: true,
      path: "core/plugin.ts",
      tplPath: (0, import_path.join)(import_constants.TEMPLATES_DIR, "plugin.tpl"),
      context: {
        plugins: plugins.map((plugin, index) => ({
          index,
          path: (0, import_utils.winPath)(plugin)
        })),
        validKeys
      }
    });
    if (api.config.ssr) {
      const umiPluginPath = (0, import_utils.winPath)((0, import_path.join)(umiDir, "client/client/plugin.js"));
      const umiServerPath = (0, import_utils.winPath)(require.resolve("@umijs/server/dist/ssr"));
      const routesWithServerLoader = Object.keys(routes).reduce((memo, id) => {
        if (routes[id].hasServerLoader) {
          memo.push({
            id,
            path: routes[id].__absFile
          });
        }
        return memo;
      }, []);
      api.writeTmpFile({
        noPluginDir: true,
        path: "umi.server.ts",
        tplPath: (0, import_path.join)(import_constants.TEMPLATES_DIR, "server.tpl"),
        context: {
          routes: JSON.stringify(clonedRoutes, null, 2).replace(/"component": "await import\((.*)\)"/g, '"component": await import("$1")'),
          routesWithServerLoader,
          umiPluginPath,
          serverRendererPath,
          umiServerPath,
          validKeys,
          assetsPath: (0, import_path.join)(api.paths.absOutputPath, "build-manifest.json"),
          env: JSON.stringify(api.env)
        }
      });
    }
    if (api.appData.framework === "react") {
      api.writeTmpFile({
        noPluginDir: true,
        path: "core/history.ts",
        tplPath: (0, import_path.join)(import_constants.TEMPLATES_DIR, "history.tpl"),
        context: {
          rendererPath
        }
      });
    }
  });
  function checkMembers(opts) {
    const conflicts = import_utils.lodash.intersection(opts.exportMembers, opts.members);
    if (conflicts.length) {
      throw new Error(`Conflict members: ${conflicts.join(", ")} in ${opts.path}`);
    }
  }
  async function getExportsAndCheck(opts) {
    const members = await (0, import_getModuleExports.getModuleExports)({ file: opts.path });
    checkMembers({
      members,
      exportMembers: opts.exportMembers,
      path: opts.path
    });
    opts.exportMembers.push(...members);
    return members;
  }
  api.register({
    key: "onGenerateFiles",
    fn: async () => {
      const rendererPath = (0, import_utils.winPath)(await api.applyPlugins({
        key: "modifyRendererPath",
        initialValue: (0, import_path.dirname)(require.resolve("@umijs/renderer-react/package.json"))
      }));
      const exports = [];
      const exportMembers = ["default"];
      exports.push("// @umijs/renderer-*");
      exports.push(`export { ${(await getExportsAndCheck({
        path: (0, import_path.join)(rendererPath, "dist/index.js"),
        exportMembers
      })).join(", ")} } from '${rendererPath}';`);
      exports.push("// umi/client/client/plugin");
      const umiPluginPath = (0, import_utils.winPath)((0, import_path.join)(umiDir, "client/client/plugin.js"));
      exports.push(`export { ${(await getExportsAndCheck({
        path: umiPluginPath,
        exportMembers
      })).join(", ")} } from '${umiPluginPath}';`);
      exports.push(`export { history, createHistory } from './core/history';`);
      checkMembers({
        members: ["history", "createHistory"],
        exportMembers,
        path: "@@/core/history.ts"
      });
      if (api.service.config.terminal !== false) {
        exports.push(`export { terminal } from './core/terminal';`);
        checkMembers({
          members: ["terminal"],
          exportMembers,
          path: "@@/core/terminal.ts"
        });
      }
      exports.push("// plugins");
      const plugins = (0, import_fs.readdirSync)(api.paths.absTmpPath).filter((file) => {
        if (file.startsWith("plugin-") && ((0, import_fs.existsSync)((0, import_path.join)(api.paths.absTmpPath, file, "index.ts")) || (0, import_fs.existsSync)((0, import_path.join)(api.paths.absTmpPath, file, "index.tsx")))) {
          return true;
        }
      });
      for (const plugin of plugins) {
        let file;
        if ((0, import_fs.existsSync)((0, import_path.join)(api.paths.absTmpPath, plugin, "index.ts"))) {
          file = (0, import_path.join)(api.paths.absTmpPath, plugin, "index.ts");
        }
        if ((0, import_fs.existsSync)((0, import_path.join)(api.paths.absTmpPath, plugin, "index.tsx"))) {
          file = (0, import_path.join)(api.paths.absTmpPath, plugin, "index.tsx");
        }
        const pluginExports = await getExportsAndCheck({
          path: file,
          exportMembers
        });
        if (pluginExports.length) {
          exports.push(`export { ${pluginExports.join(", ")} } from '${(0, import_utils.winPath)((0, import_path.join)(api.paths.absTmpPath, plugin))}';`);
        }
      }
      exports.push("// plugins types.d.ts");
      for (const plugin of plugins) {
        const file = (0, import_utils.winPath)((0, import_path.join)(api.paths.absTmpPath, plugin, "types.d.ts"));
        if ((0, import_fs.existsSync)(file)) {
          const noSuffixFile = file.replace(/\.ts$/, "");
          exports.push(`export * from '${noSuffixFile}';`);
        }
      }
      api.writeTmpFile({
        noPluginDir: true,
        path: "exports.ts",
        content: exports.join("\n")
      });
    },
    stage: Infinity
  });
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {});
