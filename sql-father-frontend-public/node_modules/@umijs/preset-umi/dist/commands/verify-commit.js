var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// verify-commit.ts
var verify_commit_exports = {};
__export(verify_commit_exports, {
  default: () => verify_commit_default
});
module.exports = __toCommonJS(verify_commit_exports);
var import_utils = require("@umijs/utils");
var import_assert = __toESM(require("assert"));
var import_fs = require("fs");
var verify_commit_default = (api) => {
  api.describe({
    key: "verifyCommit",
    config: {
      schema(Joi) {
        return Joi.object({
          scope: Joi.array().items(Joi.string()),
          allowEmoji: Joi.boolean()
        });
      }
    }
  });
  api.registerCommand({
    name: "verify-commit",
    configResolveMode: "loose",
    fn({ args }) {
      var _a, _b;
      api.logger.info("verify-commit");
      const msgPath = args._[0] || process.env.GIT_PARAMS;
      (0, import_assert.default)(msgPath, "msgPath is required");
      let msg = (0, import_fs.readFileSync)(msgPath, "utf-8").trim();
      msg = removeComment(msg);
      const emoji = `(((\uD83C[\uDF00-\uDFFF])|(\uD83D[\uDC00-\uDE4F\uDE80-\uDEFF])|[\u2600-\u2B55]) )?`;
      const scope = ((_a = api.config.verifyCommit) == null ? void 0 : _a.scope) || [
        "feat",
        "fix",
        "docs",
        "style",
        "refactor",
        "perf",
        "test",
        "workflow",
        "build",
        "ci",
        "chore",
        "types",
        "wip",
        "release",
        "dep",
        "example",
        "Merge"
      ];
      const commitRE = new RegExp(`^${((_b = api.config.verifyCommit) == null ? void 0 : _b.allowEmoji) ? emoji : ""}(revert: )?(${scope.join("|")})(\\(.+\\))?: .{1,50}`);
      if (!commitRE.test(msg)) {
        console.log();
        console.log(`Error: ${import_utils.chalk.red(`Invalid commit message format.`)}`);
        console.log();
        console.log(`Proper commit message format is required for automated changelog generation.`);
        console.log(`Examples:`);
        console.log();
        console.log(import_utils.chalk.green(`  chore(release): update changelog`));
        console.log(import_utils.chalk.green(`  fix(core): handle events on blur (close #28)`));
        console.log();
        process.exit(1);
      }
    }
  });
};
function removeComment(msg) {
  return msg.replace(/^#.*[\n\r]*/gm, "");
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {});
