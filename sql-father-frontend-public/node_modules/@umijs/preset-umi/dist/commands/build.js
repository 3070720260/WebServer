var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// build.ts
var build_exports = {};
__export(build_exports, {
  default: () => build_default
});
module.exports = __toCommonJS(build_exports);
var import_server = require("@umijs/server");
var import_utils = require("@umijs/utils");
var import_fs = require("fs");
var import_path = require("path");
var import_lazyImportFromCurrentPkg = require("../utils/lazyImportFromCurrentPkg");
var import_getAssetsMap = require("./dev/getAssetsMap");
var import_getBabelOpts = require("./dev/getBabelOpts");
var import_getMarkupArgs = require("./dev/getMarkupArgs");
var import_printMemoryUsage = require("./dev/printMemoryUsage");
var bundlerWebpack = (0, import_lazyImportFromCurrentPkg.lazyImportFromCurrentPkg)("@umijs/bundler-webpack");
var bundlerVite = (0, import_lazyImportFromCurrentPkg.lazyImportFromCurrentPkg)("@umijs/bundler-vite");
var build_default = (api) => {
  api.registerCommand({
    name: "build",
    description: "build app for production",
    details: `
umi build

# build without compression
COMPRESS=none umi build

# clean and build
umi build --clean
`,
    fn: async function() {
      import_utils.logger.info(import_utils.chalk.cyan.bold(`Umi v${api.appData.umi.version}`));
      import_utils.rimraf.sync(api.paths.absTmpPath);
      await api.applyPlugins({
        key: "onCheckPkgJSON",
        args: {
          origin: null,
          current: api.appData.pkg
        }
      });
      async function generate(opts2) {
        await api.applyPlugins({
          key: "onGenerateFiles",
          args: {
            files: opts2.files || null,
            isFirstTime: opts2.isFirstTime
          }
        });
      }
      await generate({
        isFirstTime: true
      });
      await api.applyPlugins({
        key: "onBeforeCompiler"
      });
      const {
        babelPreset,
        beforeBabelPlugins,
        beforeBabelPresets,
        extraBabelPlugins,
        extraBabelPresets
      } = await (0, import_getBabelOpts.getBabelOpts)({ api });
      const chainWebpack = async (memo, args) => {
        await api.applyPlugins({
          key: "chainWebpack",
          type: api.ApplyPluginsType.modify,
          initialValue: memo,
          args
        });
      };
      const modifyWebpackConfig = async (memo, args) => {
        return await api.applyPlugins({
          key: "modifyWebpackConfig",
          initialValue: memo,
          args
        });
      };
      const modifyViteConfig = async (memo, args) => {
        return await api.applyPlugins({
          key: "modifyViteConfig",
          initialValue: memo,
          args
        });
      };
      const opts = __spreadProps(__spreadValues({
        config: api.config,
        cwd: api.cwd,
        entry: {
          umi: (0, import_path.join)(api.paths.absTmpPath, "umi.ts")
        }
      }, api.config.vite ? { modifyViteConfig } : { babelPreset, chainWebpack, modifyWebpackConfig }), {
        beforeBabelPlugins,
        beforeBabelPresets,
        extraBabelPlugins,
        extraBabelPresets,
        onBuildComplete(opts2) {
          (0, import_printMemoryUsage.printMemoryUsage)();
          api.applyPlugins({
            key: "onBuildComplete",
            args: opts2
          });
        },
        clean: true
      });
      let stats;
      if (api.config.vite) {
        stats = await bundlerVite.build(opts);
      } else {
        stats = await bundlerWebpack.build(opts);
      }
      const assetsMap = api.config.vite ? {} : (0, import_getAssetsMap.getAssetsMap)({
        stats,
        publicPath: api.config.publicPath
      });
      const { vite } = api.args;
      const markupArgs = await (0, import_getMarkupArgs.getMarkupArgs)({ api });
      const markup = await (0, import_server.getMarkup)(__spreadProps(__spreadValues({}, markupArgs), {
        styles: markupArgs.styles.concat(api.config.vite ? [] : assetsMap["umi.css"] || []),
        scripts: (api.config.vite ? [] : assetsMap["umi.js"] || []).concat(markupArgs.scripts),
        esmScript: !!opts.config.esm || vite,
        path: "/"
      }));
      (0, import_fs.writeFileSync)((0, import_path.join)(api.paths.absOutputPath, "index.html"), markup, "utf-8");
      import_utils.logger.event("Build index.html");
      await api.applyPlugins({
        key: "onBuildHtmlComplete",
        args: opts
      });
    }
  });
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {});
