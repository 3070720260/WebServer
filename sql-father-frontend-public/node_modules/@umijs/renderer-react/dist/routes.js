import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _objectSpread from "@babel/runtime/helpers/objectSpread2";
var _excluded = ["redirect"];
// @ts-ignore
import React from 'react';
import { generatePath, Navigate, useParams } from 'react-router-dom';
import { RouteContext } from "./routeContext";
import { jsx as _jsx } from "react/jsx-runtime";
export function createClientRoutes(opts) {
  var routesById = opts.routesById,
      parentId = opts.parentId,
      routeComponents = opts.routeComponents;
  return Object.keys(routesById).filter(function (id) {
    return routesById[id].parentId === parentId;
  }).map(function (id) {
    var route = createClientRoute({
      route: routesById[id],
      routeComponent: routeComponents[id],
      loadingComponent: opts.loadingComponent
    });
    var children = createClientRoutes({
      routesById: routesById,
      routeComponents: routeComponents,
      parentId: route.id,
      loadingComponent: opts.loadingComponent
    });

    if (children.length > 0) {
      route.children = children; // TODO: remove me
      // compatible with @ant-design/pro-layout

      route.routes = children;
    }

    return route;
  });
}

function NavigateWithParams(props) {
  var params = useParams();

  var propsWithParams = _objectSpread(_objectSpread({}, props), {}, {
    to: generatePath(props.to, params)
  });

  return /*#__PURE__*/_jsx(Navigate, _objectSpread({
    replace: true
  }, propsWithParams));
}

function createClientRoute(opts) {
  var route = opts.route;

  var redirect = route.redirect,
      props = _objectWithoutProperties(route, _excluded);

  return _objectSpread({
    element: redirect ? /*#__PURE__*/_jsx(NavigateWithParams, {
      to: redirect
    }) : /*#__PURE__*/_jsx(RouteContext.Provider, {
      value: {
        route: opts.route
      },
      children: /*#__PURE__*/_jsx(RemoteComponent, {
        loader: opts.routeComponent,
        loadingComponent: opts.loadingComponent || DefaultLoading
      })
    })
  }, props);
}

function DefaultLoading() {
  return /*#__PURE__*/_jsx("div", {});
}

function RemoteComponent(props) {
  var useSuspense = true; // !!React.startTransition;

  if (useSuspense) {
    var Component = props.loader;
    return /*#__PURE__*/_jsx(React.Suspense, {
      fallback: /*#__PURE__*/_jsx(props.loadingComponent, {}),
      children: /*#__PURE__*/_jsx(Component, {})
    });
  } else {
    return null; // // @ts-ignore
    //     import loadable from '@loadable/component';
    //     const Component = loadable(props.loader, {
    //       fallback: <props.loadingComponent />,
    //     });
    //     return <Component />;
  }
}