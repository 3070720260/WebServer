import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import React from 'react';
import { StaticRouter } from 'react-router-dom/server';
import { AppContext } from "./appContext";
import { Routes } from "./browser";
import { createClientRoutes } from "./routes";
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
// Get the root React component for ReactDOMServer.renderToString
export function getClientRootComponent(_x) {
  return _getClientRootComponent.apply(this, arguments);
}

function _getClientRootComponent() {
  _getClientRootComponent = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(opts) {
    var basename, components, clientRoutes, rootContainer, _i, _arr, key;

    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            basename = '/';
            components = _objectSpread({}, opts.routeComponents);
            clientRoutes = createClientRoutes({
              routesById: opts.routes,
              routeComponents: components
            });
            rootContainer = /*#__PURE__*/_jsx(StaticRouter, {
              basename: basename,
              location: opts.location,
              children: /*#__PURE__*/_jsx(Routes, {})
            });

            for (_i = 0, _arr = [// Lowest to the highest priority
            'innerProvider', 'i18nProvider', 'accessProvider', 'dataflowProvider', 'outerProvider', 'rootContainer']; _i < _arr.length; _i++) {
              key = _arr[_i];
              rootContainer = opts.pluginManager.applyPlugins({
                type: 'modify',
                key: key,
                initialValue: rootContainer,
                args: {}
              });
            }

            return _context.abrupt("return", /*#__PURE__*/_jsx(Html, {
              loaderData: opts.loaderData,
              manifest: opts.manifest,
              children: /*#__PURE__*/_jsx(AppContext.Provider, {
                value: {
                  routes: opts.routes,
                  routeComponents: opts.routeComponents,
                  clientRoutes: clientRoutes,
                  pluginManager: opts.pluginManager,
                  basename: basename,
                  clientLoaderData: {},
                  serverLoaderData: opts.loaderData
                },
                children: rootContainer
              })
            }));

          case 6:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getClientRootComponent.apply(this, arguments);
}

function Html(_ref) {
  var children = _ref.children,
      loaderData = _ref.loaderData,
      manifest = _ref.manifest;
  // TODO: 处理 head 标签，比如 favicon.ico 的一致性
  // TODO: root 支持配置
  return /*#__PURE__*/_jsxs("html", {
    lang: "en",
    children: [/*#__PURE__*/_jsxs("head", {
      children: [/*#__PURE__*/_jsx("meta", {
        charSet: "utf-8"
      }), /*#__PURE__*/_jsx("meta", {
        name: "viewport",
        content: "width=device-width, initial-scale=1"
      }), manifest.assets['umi.css'] && /*#__PURE__*/_jsx("link", {
        rel: "stylesheet",
        href: manifest.assets['umi.css']
      })]
    }), /*#__PURE__*/_jsxs("body", {
      children: [/*#__PURE__*/_jsx("noscript", {
        dangerouslySetInnerHTML: {
          __html: "<b>Enable JavaScript to run this app.</b>"
        }
      }), /*#__PURE__*/_jsx("div", {
        id: "root",
        children: children
      }), /*#__PURE__*/_jsx("script", {
        dangerouslySetInnerHTML: {
          __html: "window.__UMI_LOADER_DATA__ = ".concat(JSON.stringify(loaderData))
        }
      })]
    })]
  });
}