var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// slave.ts
var slave_exports = {};
__export(slave_exports, {
  default: () => slave_default
});
module.exports = __toCommonJS(slave_exports);
var import_assert = __toESM(require("assert"));
var import_fs = require("fs");
var import_path = require("path");
var import_plugin_utils = require("umi/plugin-utils");
var import_withTmpPath = require("../utils/withTmpPath");
var import_constants = require("./constants");
function isSlaveEnable(opts) {
  var _a, _b;
  const slaveCfg = (_b = (_a = opts.userConfig) == null ? void 0 : _a.qiankun) == null ? void 0 : _b.slave;
  if (slaveCfg) {
    return slaveCfg.enable !== false;
  }
  return !!process.env.INITIAL_QIANKUN_SLAVE_OPTIONS;
}
var slave_default = (api) => {
  api.describe({
    key: "qiankun-slave",
    enableBy: isSlaveEnable
  });
  api.addRuntimePlugin(() => {
    return [(0, import_withTmpPath.withTmpPath)({ api, path: "slaveRuntimePlugin.ts" })];
  });
  api.register({
    key: "addExtraModels",
    fn() {
      return [
        (0, import_withTmpPath.withTmpPath)({
          api,
          path: `qiankunModel.ts#{"namespace":"${import_constants.qiankunStateFromMasterModelNamespace}"}`
        })
      ];
    }
  });
  api.modifyDefaultConfig((memo) => {
    var _a, _b, _c;
    const initialSlaveOptions = __spreadValues(__spreadValues({
      devSourceMap: true
    }, JSON.parse(process.env.INITIAL_QIANKUN_SLAVE_OPTIONS || "{}")), (memo.qiankun || {}).slave);
    const modifiedDefaultConfig = __spreadProps(__spreadValues({}, memo), {
      runtimePublicPath: true,
      qiankun: __spreadProps(__spreadValues({}, memo.qiankun), {
        slave: initialSlaveOptions
      })
    });
    const shouldNotModifyDefaultBase = ((_b = (_a = api.userConfig.qiankun) == null ? void 0 : _a.slave) == null ? void 0 : _b.shouldNotModifyDefaultBase) ?? initialSlaveOptions.shouldNotModifyDefaultBase;
    const historyType = ((_c = api.userConfig.history) == null ? void 0 : _c.type) || "browser";
    if (!shouldNotModifyDefaultBase && historyType !== "hash") {
      modifiedDefaultConfig.base = `/${api.pkg.name}`;
    }
    return modifiedDefaultConfig;
  });
  api.modifyConfig((config) => {
    var _a, _b;
    if (config.mfsu !== false) {
      config.mfsu = __spreadProps(__spreadValues({}, config.mfsu), {
        mfName: ((_a = config.mfsu) == null ? void 0 : _a.mfName) || `mf_${(_b = api.pkg.name) == null ? void 0 : _b.replace(/^@/, "").replace(/\W/g, "_")}`
      });
    }
    return config;
  });
  api.addHTMLHeadScripts(() => {
    var _a, _b;
    const dontModify = (_b = (_a = api.config.qiankun) == null ? void 0 : _a.slave) == null ? void 0 : _b.shouldNotModifyRuntimePublicPath;
    return dontModify ? [] : [
      `window.publicPath = window.__INJECTED_PUBLIC_PATH_BY_QIANKUN__ || "${api.config.publicPath || "/"}";`
    ];
  });
  api.chainWebpack((config) => {
    (0, import_assert.default)(api.pkg.name, "You should have name in package.json.");
    const { shouldNotAddLibraryChunkName } = (api.config.qiankun || {}).slave;
    config.output.libraryTarget("umd").library(shouldNotAddLibraryChunkName ? api.pkg.name : `${api.pkg.name}-[name]`);
    return config;
  });
  api.modifyHTML(($) => {
    $("script").each((_, el) => {
      const scriptEl = $(el);
      const umiEntry = /\/?umi(\.\w+)?\.js$/g;
      if (umiEntry.test(scriptEl.attr("src") ?? "")) {
        scriptEl.attr("entry", "");
      }
    });
    return $;
  });
  api.addEntryImports(() => {
    return [
      {
        source: "@@/plugin-qiankun-slave/lifecycles",
        specifier: "{ genMount as qiankun_genMount, genBootstrap as qiankun_genBootstrap, genUnmount as qiankun_genUnmount, genUpdate as qiankun_genUpdate }"
      }
    ];
  });
  api.addEntryCode(() => [
    `
export const bootstrap = qiankun_genBootstrap(render);
export const mount = qiankun_genMount('${api.config.mountElementId}');
export const unmount = qiankun_genUnmount('${api.config.mountElementId}');
export const update = qiankun_genUpdate();
if (!window.__POWERED_BY_QIANKUN__) {
  bootstrap().then(mount);
}
    `
  ]);
  function getFileContent(file) {
    return (0, import_fs.readFileSync)((0, import_path.join)(__dirname, "../../libs/qiankun/slave", file), "utf-8");
  }
  api.onGenerateFiles({
    fn() {
      [
        "qiankunModel.ts",
        "connectMaster.tsx",
        "slaveRuntimePlugin.ts",
        "lifecycles.ts"
      ].forEach((file) => {
        api.writeTmpFile({
          path: file.replace(/\.tpl$/, ""),
          content: getFileContent(file).replace("__USE_MODEL__", api.isPluginEnable("model") ? `import { useModel } from '@@/plugin-model'` : `const useModel = null;`).replace(/from 'qiankun'/g, `from '${(0, import_plugin_utils.winPath)((0, import_path.dirname)(require.resolve("qiankun/package")))}'`).replace(/from 'lodash\//g, `from '${(0, import_plugin_utils.winPath)((0, import_path.dirname)(require.resolve("lodash/package")))}/`)
        });
      });
      api.writeTmpFile({
        path: "index.ts",
        content: `
export { connectMaster } from './connectMaster';
      `
      });
    },
    before: "model"
  });
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {});
